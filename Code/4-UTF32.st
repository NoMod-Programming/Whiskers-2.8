ArrayedCollection variableWordSubclass: #UTF32
	instanceVariableNames: ''
	classVariableNames: 'UnicodeToMacTable1 UnicodeToMacTable2 '
	poolDictionaries: ''
	category: 'Scratch-Translation'!
!UTF32 commentStamp: '<historical>' prior: 0!
I represent a Unicode string with each word representing a Unicode code point.
!


!UTF32 methodsFor: 'accessing' stamp: 'EMP 11/8/2015 14:53'!
atAllPut: value
	"Fill the receiver with the given value. Primitive not needed, but makes it faster"

	<primitive: 145>
	super atAllPut: value.
! !

!UTF32 methodsFor: 'accessing' stamp: 'jm 6/3/2008 12:58'!
isMacRoman
	"Answer true if I contain only characters from Squeak's Mac Roman character set."

	self do: [:uChar | (UTF32 macRomanFor: uChar) = 127 ifTrue: [^ false]].
	^ true
! !

!UTF32 methodsFor: 'accessing' stamp: 'jm 6/2/2008 16:01'!
isUnicode
	"Answer true if I represent a Unicode string."

	^ true
! !


!UTF32 methodsFor: 'converting' stamp: 'jm 6/3/2008 12:49'!
asMacRoman
	"Answer the receiver as a String encoded as well as possible in the MacRoman character set. (MacRoman is the 8-bit string encoding used with Squeak's built-in fonts.) This transformation may lose information: unicode characters that do not appear in the MacRoman character set are mapped to an arbitrary character that appears a box in most Squeak fonts. "

	| result |
	result _ String new: self size.
	1 to: self size do: [:i |
		result byteAt: i put: (UTF32 macRomanFor: (self at: i))].
	^ result
! !

!UTF32 methodsFor: 'converting' stamp: 'jm 6/29/2008 17:39'!
asNumberNoError

	^ self asMacRoman asNumberNoError! !

!UTF32 methodsFor: 'converting' stamp: 'jm 6/29/2008 10:35'!
asText

	^ self asUTF8 asText! !

!UTF32 methodsFor: 'converting' stamp: 'jm 9/12/2007 09:11'!
asUTF32
	"Answer this Unicode string encoded as UTF-32."

	^ self
! !

!UTF32 methodsFor: 'converting' stamp: 'jm 9/13/2007 17:18'!
asUTF8
	"Answer this Unicode string encoded as UTF-8."

	^ UTF8 from: self
! !


!UTF32 methodsFor: 'printing' stamp: 'jm 6/10/2008 15:29'!
printOn: aStream

	aStream nextPutAll: 'UTF32['.
	self isMacRoman
		ifTrue: [aStream nextPut:$'; nextPutAll: self asMacRoman; nextPut: $']
		ifFalse: [aStream nextPutAll: self size printString].
	aStream nextPutAll: ']'.
! !


!UTF32 methodsFor: 'private' stamp: 'jm 9/12/2007 08:57'!
replaceFrom: start to: stop with: replacement startingAt: repStart 
	"Primitive. This destructively replaces elements from start to stop in the receiver starting at index, repStart, in the collection, replacement. Answer the receiver. Range checks are performed in the primitive only. Optional. See Object documentation whatIsAPrimitive."

	<primitive: 105>
	super replaceFrom: start to: stop with: replacement startingAt: repStart.
! !


!UTF32 methodsFor: 'utilities' stamp: 'jm 7/5/2008 09:04'!
indexOfSeparatorStartingAt: index
	"Answer the index of the next separator character found starting at the given index. Answer size + 1 if none is found."

	index to: self size do: [:i | (self at: i) <= 32 ifTrue: [^ i]].
	^ self size + 1
! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

UTF32 class
	instanceVariableNames: ''!

!UTF32 class methodsFor: 'class initialization' stamp: 'jm 9/17/2007 22:29'!
initialize
	"self initialize"

	UnicodeToMacTable1 _ #(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 202 193 162 163 127 180 127 164 172 169 187 199 194 127 168 248 161 177 127 127 171 181 166 225 252 127 188 200 127 127 127 192 203 231 229 204 128 129 174 130 233 131 230 232 237 234 235 236 127 132 241 238 239 205 133 127 175 244 242 243 134 127 127 167 136 135 137 139 138 140 190 141 143 142 144 145 147 146 148 149 127 150 152 151 153 155 154 214 191 157 156 158 159 127 127 216 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 245 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 206 207 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 217 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 196 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 246 255 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 249 250 251 254 247 253 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 189 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 185).

	UnicodeToMacTable2 _ #(208 209 127 127 127 212 213 226 127 210 211 227 127 160 224 165 127 127 127 201 127 127 127 127 127 127 127 127 127 228 127 127 127 127 127 127 127 127 220 221 127 127 127 127 127 127 127 127 127 218 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 219 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 170 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 182 127 127 127 198 127 127 127 127 127 127 127 127 184 127 183 127 127 127 127 127 127 127 127 195 127 127 127 176 127 127 127 127 127 127 127 127 127 127 127 127 186 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 197 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 173 127 127 127 178 179 127 127 127 127 127).
! !


!UTF32 class methodsFor: 'utility' stamp: 'jm 6/3/2008 12:59'!
macRomanFor: unicodeValue
	"Answer the MacRoman character value for the given Unicode character value or 127 (delete, which is a box in Squeak fonts) if there is no equivalent MacRoman character."

	| noMapping |
	noMapping _ 127.
	unicodeValue <= 960 ifTrue: [^ UnicodeToMacTable1 at: unicodeValue + 1].
	unicodeValue < 8211 ifTrue: [^ noMapping].
	unicodeValue <= 8805 ifTrue: [^  UnicodeToMacTable2 at: unicodeValue - 8210].
	9674 = unicodeValue ifTrue: [^ 215].
	63743 = unicodeValue ifTrue: [^ 240].
	64257 = unicodeValue ifTrue: [^ 222].
	64258 = unicodeValue ifTrue: [^ 223].
	^ noMapping
! !


UTF32 initialize!
